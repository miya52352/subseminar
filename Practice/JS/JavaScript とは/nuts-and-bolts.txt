アプリケーションプログラミングインタフェース (API) 

JavaScript コードで使用するための特別なスーパーパワーを提供します。

API がなければ難しかったり、不可能であるようなコードを、すぐに使えるブロックのように、開発者がプログラムを作ることができるようになります。
家を作るときの既製の家具と同じことを、プログラミングでしてくれるのです。
自分で設計し、使用する木材を選定し、正しい形で板を切り出して、正しいサイズのネジを見つけて、自分で組み立てるよりも
既に切り出されたボードとネジを使って本棚を組み立てるだけの方がずっと簡単ですよね。



API は大まかに 2 種類に分けられます。
* ブラウザー API
* サードパーティ API


ブラウザー API
DOM (Document Object Model) API
位置情報 API
Canvas と WebGL


サードパーティ API
ブラウザーには組み込まれておらず、さらに普通はウェブ上のどこかからそのコードと情報を探さなければなりません。







JavaScript の実行順序
基本的にtop to down
const button = document.querySelector("button");

button.addEventListener("click", updateName);

function updateName() {
  const name = prompt("名前を入力してください");
  button.textContent = `Player 1: ${name}`;
}

最初の二行を入れ替えると動かなくなる。

JavaScriptは軽量なインタープリター型プログラミング言語








サーバーサイドとクライアントサイド

クライアントサイドコードはユーザーのコンピューター上で実行されるコードです。ウェブページを見ているとき
ページのクライアントサイドコードがダウンロードされて、ブラウザーで実行されて表示されます。
 このモジュールのことを明示的にクライアントサイド JavaScript と言います。


一方、サーバーサイドコードはサーバー上で実行され、結果がブラウザーにダウンロードされて表示されます。
ウェブで人気のあるサーバーサイドの言語は、PHP、Python、Ruby、ASP.NET など。そして JavaScript です！ 








動的コードと静的コード

クライアントサイドの JavaScript と、サーバーサイドの言語を説明するのに動的という言葉を使います。
これはウェブページやウェブアプリが必要に応じてコンテンツを生成し、異なる状況において異なる表示ができるという能力を
指しています。

動的に更新されるコンテンツを含まないウェブページは静的と表現されます。静的なウェブページとは常に同じコンテンツを
表示するページのことです。







ページに JavaScript を追加する方法

* 内蔵 JavaScript
</head> タグの直前に以下のコードを追加します。

<script>
  // JavaScript をここに書きます
</script>



* 外部 JavaScript
</head> タグの直前に以下のコードを追加します。

<script src="script.js" defer></script>







HTML要素を操作する方法

DOMを使う。
HTMLやXMLドキュメントなどのマークアップ言語と、CSSをJavaScriptなどのプログラミング言語からアクセスできるように
するためのAPI

const buttons = document.querySelectorAll("button");

for (const button of buttons) {
  button.addEventListener("click", createParagraph);
}








スクリプトの読み込み方針
* async と defer のどちらも、ページのその他の部分（DOM など）と並行して、ブラウザーにスクリプトを
  別スレッドでダウンロードするよう指示するので、読み取りの過程で読み取りプロセスがブロックされることはなくなります。
* async 属性を付けたスクリプトは、ダウンロードが完了し次第、すぐに実行されます。 これはページをブロックし
  特定の実行順序を保証することはありません。
* defer 属性を付けたスクリプトは、出現順に読み込まれ、すべての読み込みが終了した後に実行されます。
* スクリプトを直ちに実行するべきであり、依存関係がない場合は、 async を使用してください。
* スクリプトが解釈を待つ必要があり、他のスクリプトや DOM 上の位置に依存する場合は、 defer を使用して
  読み込んでください。対応する <script> 要素をブラウザーに実行させたい順に配置してください。








コメント

1 行で収まるコメントは 2 つのスラッシュ (//) のあとに続けて書きます。
// これはコメントです


複数行に渡るコメントは /* から */ の間に書きます。
/*
  これも
  コメントです
*/