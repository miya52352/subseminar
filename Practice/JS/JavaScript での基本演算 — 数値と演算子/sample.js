// 数値の種類

// * 整数 (integer) とは 10、400、-5 といった数値のことです。
// * 浮動小数点数 (float) とは小数以下の数と小数桁を持つ 12.5 や 56.7786543 といった数値のことです。
// * 倍精度浮動小数点数 (double) は浮動小数点数の特殊な型であり、通常の浮動小数点数よりも大きな精度を持ちます 
//   (つまりより大きい桁数まで精度を保つことを意味します)。



// さらに通常とは異なる数値表現も使います！今まで出てきた数値は 10 を基数 (0 ～ 9 を 1 つの桁として扱う) とした
// 十進数でしたが、他にも以下のようなものがあります。
// * 二進数 — 0 と 1 だけで表現される、コンピューターの最も低レベルな言語です。
// * 八進数 — 8 を基数として、1 桁を 0 ～ 7 で表します。
// * 十六進数 — 16 を基数として、1 桁を 0 ～ 9、a ～ f で表します。もしかしたら CSS の色を設定するときに
//            見たかもしれませんね。


const myInt = 5;
const myFloat = 6.667;

console.log(typeof myInt);
console.log(typeof myFloat);







// 便利な Number のメソッド
// Number オブジェクトは、あなたが JavaScript を使う時すべての基本的な数値を表現するインスタンスですが
// その中には、数値を操作するための沢山の便利なメソッドがあります。

const lotsOfDecimal = 1.766584958675746364;
console.log(lotsOfDecimal);
const twoDecimalPlaces = lotsOfDecimal.toFixed(2);
console.log(twoDecimalPlaces);








// 数値データ型への変換
let myNumber = "74";
myNumber += 3;
// 答えは 743 です。77 ではありません。
// なぜなら myNumber は文字列として定義されているからです。以下の命令で確認することができます。
console.log(typeof myNumber);


// これは以下のようにして修正することができます。
let myAnotherNumber = "74";
myAnotherNumber = Number(myAnotherNumber) + 3;






// 算術演算子

// 剰余
console.log(60 % 3);

// 	べき乗
console.log(4 ** 3);








// インクリメント演算子とデクリメント演算子
let num1 = 3
num1++;
console.log(num1);

let num2 = 10;
num2--;
console.log(num2);








// 比較演算子
// ===	厳密等価
// !==	厳密不等価
// メモ: 
// もしかしたら == や != といった演算子を同値かどうかの判定に使用する人を見かけることがあるかも
// しれません。これらも JavaScript の有効な演算子ですが、=== や !== とは異なります。前者のバージョンは
// 値が同様であるかを判定しますが、データ型が同様かは判定しません。後者は厳格なバージョンで値とデータ型の
// 両方を判定します。厳格なバージョンはエラーとなることが少ないため後者を使用することをお勧めします。